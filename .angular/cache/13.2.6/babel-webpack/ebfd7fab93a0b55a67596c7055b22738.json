{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, Component, Input, Output, NgModule } from '@angular/core';\nimport * as SignaturePadNative from 'signature_pad';\n\nclass SignaturePad {\n  constructor(elementRef) {\n    // no op\n    this.elementRef = elementRef;\n    this.options = this.options || {};\n    this.onBeginEvent = new EventEmitter();\n    this.onEndEvent = new EventEmitter();\n  }\n\n  ngAfterContentInit() {\n    const canvas = this.elementRef.nativeElement.querySelector('canvas');\n\n    if (this.options.canvasHeight) {\n      canvas.height = this.options.canvasHeight;\n    }\n\n    if (this.options.canvasWidth) {\n      canvas.width = this.options.canvasWidth;\n    }\n\n    this.signaturePad = new SignaturePadNative.default(canvas, this.options);\n    this.signaturePad.onBegin = this.onBegin.bind(this);\n    this.signaturePad.onEnd = this.onEnd.bind(this);\n  }\n\n  ngOnDestroy() {\n    const canvas = this.elementRef.nativeElement.querySelector('canvas');\n    canvas.width = 0;\n    canvas.height = 0;\n  }\n\n  resizeCanvas() {\n    // When zoomed out to less than 100%, for some very strange reason,\n    // some browsers report devicePixelRatio as less than 1\n    // and only part of the canvas is cleared then.\n    const ratio = Math.max(window.devicePixelRatio || 1, 1);\n    const canvas = this.signaturePad.canvas;\n    canvas.width = canvas.offsetWidth * ratio;\n    canvas.height = canvas.offsetHeight * ratio;\n    canvas.getContext('2d').scale(ratio, ratio);\n    this.signaturePad.clear(); // otherwise isEmpty() might return incorrect value\n  } // Returns signature image as an array of point groups\n\n\n  toData() {\n    if (this.signaturePad) {\n      return this.signaturePad.toData();\n    } else {\n      return [];\n    }\n  } // Draws signature image from an array of point groups\n\n\n  fromData(points) {\n    this.signaturePad.fromData(points);\n  } // Returns signature image as data URL (see https://mdn.io/todataurl for the list of possible paramters)\n\n\n  toDataURL(imageType, quality) {\n    return this.signaturePad.toDataURL(imageType, quality); // save image as data URL\n  } // Draws signature image from data URL\n\n\n  fromDataURL(dataURL, options = {}) {\n    // set default height and width on read data from URL\n    if (!options.hasOwnProperty('height') && this.options.canvasHeight) {\n      options.height = this.options.canvasHeight;\n    }\n\n    if (!options.hasOwnProperty('width') && this.options.canvasWidth) {\n      options.width = this.options.canvasWidth;\n    }\n\n    this.signaturePad.fromDataURL(dataURL, options);\n  } // Clears the canvas\n\n\n  clear() {\n    this.signaturePad.clear();\n  } // Returns true if canvas is empty, otherwise returns false\n\n\n  isEmpty() {\n    return this.signaturePad.isEmpty();\n  } // Unbinds all event handlers\n\n\n  off() {\n    this.signaturePad.off();\n  } // Rebinds all event handlers\n\n\n  on() {\n    this.signaturePad.on();\n  } // set an option on the signaturePad - e.g. set('minWidth', 50);\n\n\n  set(option, value) {\n    switch (option) {\n      case 'canvasHeight':\n        this.signaturePad.canvas.height = value;\n        break;\n\n      case 'canvasWidth':\n        this.signaturePad.canvas.width = value;\n        break;\n\n      default:\n        this.signaturePad[option] = value;\n    }\n  } // notify subscribers on signature begin\n\n\n  onBegin() {\n    this.onBeginEvent.emit(true);\n  } // notify subscribers on signature end\n\n\n  onEnd() {\n    this.onEndEvent.emit(true);\n  }\n\n  queryPad() {\n    return this.signaturePad;\n  }\n\n}\n\nSignaturePad.ɵfac = function SignaturePad_Factory(t) {\n  return new (t || SignaturePad)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nSignaturePad.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: SignaturePad,\n  selectors: [[\"signature-pad\"]],\n  inputs: {\n    options: \"options\"\n  },\n  outputs: {\n    onBeginEvent: \"onBeginEvent\",\n    onEndEvent: \"onEndEvent\"\n  },\n  decls: 1,\n  vars: 0,\n  template: function SignaturePad_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"canvas\");\n    }\n  },\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SignaturePad, [{\n    type: Component,\n    args: [{\n      template: '<canvas></canvas>',\n      selector: 'signature-pad'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, {\n    options: [{\n      type: Input\n    }],\n    onBeginEvent: [{\n      type: Output\n    }],\n    onEndEvent: [{\n      type: Output\n    }]\n  });\n})();\n\nclass SignaturePadModule {}\n\nSignaturePadModule.ɵfac = function SignaturePadModule_Factory(t) {\n  return new (t || SignaturePadModule)();\n};\n\nSignaturePadModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: SignaturePadModule\n});\nSignaturePadModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SignaturePadModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [SignaturePad],\n      imports: [],\n      exports: [SignaturePad]\n    }]\n  }], null, null);\n})();\n/*\n * Public API Surface of angular2-signaturepad\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { SignaturePad, SignaturePadModule };","map":{"version":3,"sources":["/Users/rahulanand/Documents/LATEST_MBB_PROJECT/node_modules/angular2-signaturepad/fesm2015/angular2-signaturepad.mjs"],"names":["i0","EventEmitter","Component","Input","Output","NgModule","SignaturePadNative","SignaturePad","constructor","elementRef","options","onBeginEvent","onEndEvent","ngAfterContentInit","canvas","nativeElement","querySelector","canvasHeight","height","canvasWidth","width","signaturePad","default","onBegin","bind","onEnd","ngOnDestroy","resizeCanvas","ratio","Math","max","window","devicePixelRatio","offsetWidth","offsetHeight","getContext","scale","clear","toData","fromData","points","toDataURL","imageType","quality","fromDataURL","dataURL","hasOwnProperty","isEmpty","off","on","set","option","value","emit","queryPad","ɵfac","ElementRef","ɵcmp","type","args","template","selector","SignaturePadModule","ɵmod","ɵinj","declarations","imports","exports"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { EventEmitter, Component, Input, Output, NgModule } from '@angular/core';\nimport * as SignaturePadNative from 'signature_pad';\n\nclass SignaturePad {\n    constructor(elementRef) {\n        // no op\n        this.elementRef = elementRef;\n        this.options = this.options || {};\n        this.onBeginEvent = new EventEmitter();\n        this.onEndEvent = new EventEmitter();\n    }\n    ngAfterContentInit() {\n        const canvas = this.elementRef.nativeElement.querySelector('canvas');\n        if (this.options.canvasHeight) {\n            canvas.height = this.options.canvasHeight;\n        }\n        if (this.options.canvasWidth) {\n            canvas.width = this.options.canvasWidth;\n        }\n        this.signaturePad = new SignaturePadNative.default(canvas, this.options);\n        this.signaturePad.onBegin = this.onBegin.bind(this);\n        this.signaturePad.onEnd = this.onEnd.bind(this);\n    }\n    ngOnDestroy() {\n        const canvas = this.elementRef.nativeElement.querySelector('canvas');\n        canvas.width = 0;\n        canvas.height = 0;\n    }\n    resizeCanvas() {\n        // When zoomed out to less than 100%, for some very strange reason,\n        // some browsers report devicePixelRatio as less than 1\n        // and only part of the canvas is cleared then.\n        const ratio = Math.max(window.devicePixelRatio || 1, 1);\n        const canvas = this.signaturePad.canvas;\n        canvas.width = canvas.offsetWidth * ratio;\n        canvas.height = canvas.offsetHeight * ratio;\n        canvas.getContext('2d').scale(ratio, ratio);\n        this.signaturePad.clear(); // otherwise isEmpty() might return incorrect value\n    }\n    // Returns signature image as an array of point groups\n    toData() {\n        if (this.signaturePad) {\n            return this.signaturePad.toData();\n        }\n        else {\n            return [];\n        }\n    }\n    // Draws signature image from an array of point groups\n    fromData(points) {\n        this.signaturePad.fromData(points);\n    }\n    // Returns signature image as data URL (see https://mdn.io/todataurl for the list of possible paramters)\n    toDataURL(imageType, quality) {\n        return this.signaturePad.toDataURL(imageType, quality); // save image as data URL\n    }\n    // Draws signature image from data URL\n    fromDataURL(dataURL, options = {}) {\n        // set default height and width on read data from URL\n        if (!options.hasOwnProperty('height') &&\n            this.options.canvasHeight) {\n            options.height = this.options.canvasHeight;\n        }\n        if (!options.hasOwnProperty('width') && this.options.canvasWidth) {\n            options.width = this.options.canvasWidth;\n        }\n        this.signaturePad.fromDataURL(dataURL, options);\n    }\n    // Clears the canvas\n    clear() {\n        this.signaturePad.clear();\n    }\n    // Returns true if canvas is empty, otherwise returns false\n    isEmpty() {\n        return this.signaturePad.isEmpty();\n    }\n    // Unbinds all event handlers\n    off() {\n        this.signaturePad.off();\n    }\n    // Rebinds all event handlers\n    on() {\n        this.signaturePad.on();\n    }\n    // set an option on the signaturePad - e.g. set('minWidth', 50);\n    set(option, value) {\n        switch (option) {\n            case 'canvasHeight':\n                this.signaturePad.canvas.height = value;\n                break;\n            case 'canvasWidth':\n                this.signaturePad.canvas.width = value;\n                break;\n            default:\n                this.signaturePad[option] = value;\n        }\n    }\n    // notify subscribers on signature begin\n    onBegin() {\n        this.onBeginEvent.emit(true);\n    }\n    // notify subscribers on signature end\n    onEnd() {\n        this.onEndEvent.emit(true);\n    }\n    queryPad() {\n        return this.signaturePad;\n    }\n}\nSignaturePad.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: SignaturePad, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nSignaturePad.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.0.2\", type: SignaturePad, selector: \"signature-pad\", inputs: { options: \"options\" }, outputs: { onBeginEvent: \"onBeginEvent\", onEndEvent: \"onEndEvent\" }, ngImport: i0, template: '<canvas></canvas>', isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: SignaturePad, decorators: [{\n            type: Component,\n            args: [{\n                    template: '<canvas></canvas>',\n                    selector: 'signature-pad',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { options: [{\n                type: Input\n            }], onBeginEvent: [{\n                type: Output\n            }], onEndEvent: [{\n                type: Output\n            }] } });\n\nclass SignaturePadModule {\n}\nSignaturePadModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: SignaturePadModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nSignaturePadModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: SignaturePadModule, declarations: [SignaturePad], exports: [SignaturePad] });\nSignaturePadModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: SignaturePadModule, imports: [[]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: SignaturePadModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [SignaturePad],\n                    imports: [],\n                    exports: [SignaturePad],\n                }]\n        }] });\n\n/*\n * Public API Surface of angular2-signaturepad\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { SignaturePad, SignaturePadModule };\n"]},"metadata":{},"sourceType":"module"}